<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:HBox xmlns="flexlib.containers.*" xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mate="http://mate.asfusion.com/" visible="false" backgroundColor="0xCCCCCC"
	cornerRadius="5" borderStyle="solid"
	paddingBottom="3" paddingTop="3" paddingLeft="3" paddingRight="3" alpha="0"
	xmlns:views="org.bigbluebutton.modules.whiteboard.views.*" xmlns:local="*"
	creationComplete="onCreationComplete()">
	
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="viewerMode" />
	<mate:Listener type="{WhiteboardButtonEvent.DISABLE_WHITEBOARD}" method="disableTextToolbar" />
	<mate:Listener type="{StopWhiteboardModuleEvent.STOP_HIGHLIGHTER_MODULE_EVENT}" method="closeToolbar" />
	<mx:Script>
		<![CDATA[
			import flexlib.mdi.containers.MDIWindow;
			
			import mx.events.MoveEvent;
			import mx.events.ResizeEvent;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.whiteboard.business.shapes.TextObject;
			import org.bigbluebutton.modules.whiteboard.events.StopWhiteboardModuleEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardButtonEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private static const LOGGER:ILogger = getClassLogger(WhiteboardTextToolbar);      
			public var canvas:WhiteboardCanvas;
			public var textColor:uint;
			public var bgColor:uint;
			public var textSize:Number;
			public var backgroundVisible:Boolean;
			
			private var currentlySelectedTextObject:TextObject = null;	
			private var containerToOverlay:MDIWindow;
			private var normalAlpha:Number = 0.55;
			private var focusedAlpha:Number = 1.0;
			private var hasFocus:Boolean;
			[Bindable] private var fontSizes:Array = ["12", "14", "16", "18", "22", "24", "32", "36"];
			
			private function onCreationComplete():void {
				this.alpha = normalAlpha;
				this.addEventListener(MouseEvent.ROLL_OVER, makeFocused);
				this.addEventListener(MouseEvent.ROLL_OUT, makeDim);
				
				
				/* WARNING: enabling the following code caused some nasty issues with  the whiteboard
					It is kept here for reference
				*/
				/*this.textColor = ctextpik.selectedColor = 0x000000;
				this.bgColor = cbackpik.selectedColor = 0x000000;
				this.backgroundVisible = btnToggleBackground.selected = false;
				this.textSizeMenu.label = "14";
				this.textSize = Number(textSizeMenu.label);*/
			}
			
			/* Following two methods are used for aesthetics when mouse hovers over TextToolbar and when it hovers out of it */
			private function makeDim(event:MouseEvent):void {
					this.alpha = normalAlpha;
			}
			
			private function makeFocused(event:MouseEvent):void {
					this.alpha = focusedAlpha;
			}
			
			private function onFontSizeChange():void {
				setTextSize(Number(textSizeMenu.selectedItem));
			}
			
			/**
			 * Sets the text color of the selected text object
			 * @param e The event
			 * 
			 */		
			protected function onFontColorChange(e:Event):void{
				setTextColor(e.target.selectedColor);
			}
			
			/**
			 * Sets the text size of the selected text object
			 * @param size the size to set for the selected text object
			 * 
			 */			
			protected function setTextSize(size:Number):void {
				enableTextToolbar();
				this.textSize = size;
				currentlySelectedTextObject.applyNewFormat(textColor, textSize);
			}
			
			protected function setTextColor(color:uint):void {
				enableTextToolbar();
				this.textColor = color;
				currentlySelectedTextObject.applyNewFormat(textColor, textSize);
			}
						
			private function viewerMode(e:MadePresenterEvent):void{
				disableTextToolbar();
			}
			
			private function enableTextToolbar():void{
				this.visible = true;
				callLater(repositionToolbarByWindow);
			}
			
			private function disableTextToolbar(e:Event=null):void{
				this.visible = false;
			}
			
			private function closeToolbar(e:StopWhiteboardModuleEvent):void{
				parent.removeChild(this);
			}
			
			public function syncPropsWith(tobj:TextObject):void {
				currentlySelectedTextObject = tobj;
				
				if(tobj != null) {
					enableTextToolbar();
					repositionToolbar();
					setTextColor(ctextpik.selectedColor);
					setTextSize(Number(textSizeMenu.selectedItem));
				} else {
					disableTextToolbar();
				}
			}
			
			// invoked by WhiteboardManager when the TextToolbar is first loaded
			public function positionToolbar(container:MDIWindow):void{
				containerToOverlay = container;
				containerToOverlay.addEventListener(ResizeEvent.RESIZE, repositionToolbarByWindow);
				containerToOverlay.addEventListener(MouseEvent.CLICK, repositionToolbarByWindow);
				containerToOverlay.addEventListener(MoveEvent.MOVE, repositionToolbarByWindow);
			}
			
			/* required for repositioning the TextToolbar when an event occurs on the presentation window */
			public function repositionToolbarByWindow(event:Event = null):void {
				repositionToolbar();
			}
			
			public function repositionToolbar():void {
				if (this.visible && currentlySelectedTextObject) {
					// translate TextObject's coords to stage coords because TextToolbar is added to stage
 					
					var loc:Point = canvas.localToGlobal(new Point(currentlySelectedTextObject.x, currentlySelectedTextObject.y));
					this.x = loc.x;
					this.y = loc.y - this.height - 45;
					parent.setChildIndex(this, parent.numChildren-1);
				}
			}
			
			// repositions the toolbar when canvas is zoomed			
			public function adjustForZoom(x:Number, y:Number):void {
				repositionToolbar();
			}
		]]>
	</mx:Script>

	<mx:ColorPicker width="20" height="20"  change="onFontColorChange(event)" id="ctextpik" selectedColor="0x000000"
					toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.texttoolbar.textColorPicker')}"/>

	<views:CustomComboBox id="textSizeMenu" dataProvider="{fontSizes}" selectedItem="18" change="onFontSizeChange()" rowCount="8"
				 toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.texttoolbar.textSizeMenu')}" />
</mx:HBox>
